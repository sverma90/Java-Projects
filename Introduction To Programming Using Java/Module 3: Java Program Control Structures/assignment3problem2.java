import java.util.Scanner;

/**
 * 	@author Soumil Verma
 *  EN.605.201.84.SP21
 * 	JAVASE-13
 *  February 12th, 2021
 */

/**
 * 	I coded this myself with some research links below
 *  It took me about 8-12 hours to finish
 * 
 *  Source: 
 *  https://coderanch.com/t/682040/java/convert-scanner-input-primitive-integer
 *  https://stackoverflow.com/questions/3059333/validating-input-using-java-util-scanner
 *  https://stackoverflow.com/questions/32752997/java-loop-to-repeat-program
 *  https://stackoverflow.com/questions/7951690/how-do-i-exit-a-while-loop-in-java
 */

public class assignment3problem2 {

	public static void main( String [] args )
	{	
		/*
  		 * The program shall also allow the user to play 
  		 * the game again until the user declines.
  		 * 
  		 * NOTE from developer:
  		 * 
  		 * The 3 lines are important to repeat the program
  		 * See at the very end of program. 
  		 */
  		
		  /* 
		  * All scanner object declaration
		  * Declared outside of while loop only because 
		  * (scannername).close() was creating ExceptionThreat problems
		  */
          Scanner askUserToRunAgain = new Scanner(System.in);
          Scanner inputN = new Scanner(System.in);
          Scanner guessNumOfTimes = new Scanner(System.in);
          Scanner playerGuessInput = new Scanner(System.in);
          
		  /*
		  * Variable to run while loop and repeat problem
		  * If set to zero, program ends.
		  */
          int askToRunAgain = 1;
  
          while (askToRunAgain == 1) {
          	
      		/* 
      		 * asks a user to guess a secret number between 1 and N,
      		 * where N is a positive number that the user is prompted for. 
      		 */  

      		int N = 0;
      		
			/*
			* Do while loop asks user to enter number greater than zero. 
			* If zero (or less) or char, inner while loop repeats until 
			* correct input is captured
			*/

      		do {
      			System.out.print("Enter a number greater than zero for (N): ");
      		    while (!inputN.hasNextInt()) {
      		        System.out.print("INVALID ENTRY. Please enter a number greater than zero for (N): ");
      		        inputN.next();
      		    }
      		   N = inputN.nextInt();
      		} while (N <= 0);		
      		    		
      		/*
      		 * The program should also prompt the user for the 
      		 * maximum number of guesses they would like to make.
      		 */
      				
      		System.out.print("Enter the maximum number of guesses you would like to make? ");
      		int numberOfGuesses = guessNumOfTimes.nextInt();
      		    		
      		/*
      		 * Each time the player makes a guess, 
      		 * the program shall respond with 
      		 * “correct”, “too low”, or “too high”. (see if statements below)
      		 * 
      		 * The program should keep track of the number 
      		 * of guesses the user made to discover the secret number. (numberOfGuesses)
      		 * 
      		 * The program should continue execution until the user has discovered 
      		 * the secret number or has exceeded the maximum number of guesses. (see while loop)
			 * 
			 * Break was added to exit the while loop ONLY
			 * if N exceeded the number 
			 * for max guesses (numberOfGuesses)  
      		 */
      		
      		//Random Number Formula (provided)
      		int randomNumber = (int) ( N * Math.random() ) + 1;
      		
      		int i=1; 
      		
      		while(i <= numberOfGuesses && i <= N) {
      			
      			System.out.printf("Guess a number between 1 to %1$s: ", N);
      			int playerGuess = playerGuessInput.nextInt();
      			
      			if(playerGuess == randomNumber) {
      				System.out.println("Correct Guess.");
					break;
      			}
      			if(playerGuess > randomNumber) {
      				System.out.printf("Too High, try again. %1$s out of %2$s attempt(s) complete. \n", i, numberOfGuesses);
      			}
      			if(playerGuess < randomNumber) {
      				System.out.printf("Too Low, try again. %1$s out of %2$s attempt(s) complete. \n", i, numberOfGuesses);
      			}
      			i++;
      		}
      		
      		System.out.printf("\nRandom Number Generated by Computer: %1$s \n", randomNumber);
      		
      		/*
      		 * The program shall also allow the user to play 
      		 * the game again until the user declines.
      		 * 
      		 * NOTE from developer:
      		 *  
      		 * The code below asks user whether 
      		 * to play again by pressing 1 
      		 * or quit by pressing 0. 
      		 * 
      		 * Do while loop asks user to input 1 or 0. 
      		 * Program repeats if anything else is keyed.
      		 */

              System.out.println("\nEnd of program. Would you like to play again?");            
      		do {
      			System.out.print("Press 1 to play again, press 0 to quit: ");
      		    while (!askUserToRunAgain.hasNextInt()) {
      		        System.out.print("INVALID ENTRY. Press 1 to play again, press 0 to quit: ");
      		        askUserToRunAgain.next();
      		    }
      		    askToRunAgain = askUserToRunAgain.nextInt();
      		} while (askToRunAgain != 1 && askToRunAgain !=0);
      		
          	if(askToRunAgain == 0) {
          		System.out.println("\nThank you for playing, have a good day. ");
          	}
          	if(askToRunAgain == 1) {
          		System.out.println();
          	}

          }
		  // Close Scanner Objects
          askUserToRunAgain.close();
          inputN.close();
          guessNumOfTimes.close();
          playerGuessInput.close();
	}
}